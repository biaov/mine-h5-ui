import { DTCallback, LockedCallback, ThrottleBack, DebounceBack, LockedBack } from './types';
import { FormatData, FormatTimeBack, CalculationBack } from './interfaces';
export declare const IsType: (type: string, value: any) => boolean;
export declare const DeepCopyRA: (arg: any) => any;
export declare const IsLeapyear: (num: number) => boolean;
export declare const FormatTime: (arg?: string | number | Date) => FormatTimeBack;
export declare const CountDown: (num: number, format?: string) => FormatData;
export declare const Throttle: (fn: DTCallback, time?: number) => ThrottleBack;
export declare const Debounce: (fn: DTCallback, time?: number) => DebounceBack;
export declare const FormatThousand: (num: number) => string;
export declare const Locked: (fn: LockedCallback, time?: number) => LockedBack;
export declare const AddZero: (str: string, float1: number, float2: number) => string;
export declare const Calculation: (num1: number, num2: number) => CalculationBack;
export declare const GenerateRandom: () => string;
export declare const Retarder: (time?: number) => Promise<boolean>;
declare const _default: {
    IsType: (type: string, value: any) => boolean;
    DeepCopyRA: (arg: any) => any;
    IsLeapyear: (num: number) => boolean;
    FormatTime: (arg?: string | number | Date) => FormatTimeBack;
    CountDown: (num: number, format?: string) => FormatData;
    Throttle: (fn: DTCallback, time?: number) => ThrottleBack;
    Debounce: (fn: DTCallback, time?: number) => DebounceBack;
    FormatThousand: (num: number) => string;
    Locked: (fn: LockedCallback, time?: number) => LockedBack;
    AddZero: (str: string, float1: number, float2: number) => string;
    Calculation: (num1: number, num2: number) => CalculationBack;
    GenerateRandom: () => string;
    Retarder: (time?: number) => Promise<boolean>;
};
export default _default;
